"""
Django settings for linerunner project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import time
import os
import datetime
from pathlib import Path
from loguru import logger

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#logger日志配置
report_log_path = os.path.join(BASE_DIR, "log")
today = time.strftime("%Y-%m-%d", time.localtime())
logging_file = os.path.join(report_log_path, "{}.log".format(today))
logger.add(
    logging_file,
    #格式
    format="{time:YYYY-MM-DD HH:mm:ss}|{level}|{message}",
    #文件最大大小
    rotation="500 MB",
    encoding="utf-8",
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-waepeuzo)pa^rvawo9@$k6*l8a5+bv7jt6l70!t=z%9**jkj85'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]  # 解决跨域


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'corsheaders',  # 跨域
    'drf_yasg',  # 生成接口文档
    'apps.user',    # 用户
    'apps.apiTest',  # API
    'apps.case',     # 用例
    'apps.report',   # report
    'apps.chanDao',
    'apps.task',
    'apps.xmfile',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域访问
]

ROOT_URLCONF = 'linerunner.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'linerunner.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_api',  # 数据库名字
        'HOST': '127.0.0.1',  # 数据库主机
        'PORT': 3306,  # 数据库端口
        'USER': 'root',  # 数据库用户名
        'PASSWORD': '123456',  # 数据库用户密码
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field



# ---------------- 用户认证鉴权配置开始 ---------------------
 #继承了AbstractBaseUser，需要引用自定义的模型
AUTH_USER_MODEL = 'user.User'

REST_FRAMEWORK = {
    # JWT
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'apps.user.authentications.CustomJSONWebTokenAuthentication',    # 必须配置的认证类
    ),
    # 自定义响应体和状态码
    'EXCEPTION_HANDLER': 'apps.user.utils.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.CustomPagination',
    'PAGE_SIZE': 20,
}

# 自动添加自增长主
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 修改Django用户认证后端类，为了实现多账号登录
# AUTHENTICATION_BACKENDS = ['apps.user.utils.UsernameMobileAuthBackend']

SIMPLE_JWT = {
    # 配置过期时间
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=30),
    # 开启Token更新
    "ROTATE_REFRESH_TOKENS": True,
    # 刷新时间
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=15),
    # handler加载器
    'JWT_PAYLOAD_HANDLER': 'apps.user.utils.jwt_response_payload_handler',
    # 'JWT_RESPONSE_PAYLOAD_HANDLER': 'apps.user.utils.jwt_response_payload_handler',
    # 默认Token前缀
    "AUTH_HEADER_TYPES": ("Bearer",),
}

UPLOAD_ROOT="file"

#钉钉配置
DINGDING_URL='https://oapi.dingtalk.com/robot/send?access_token=263f0e9b4932e910e7f55ebbae62a07a34a4f84adc8421f11b7b20f50eecb3e4'
